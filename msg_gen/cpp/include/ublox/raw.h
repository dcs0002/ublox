/* Auto-generated by genmsg_cpp for file /home/cody/Development/DR_ws/ublox/msg/raw.msg */
#ifndef UBLOX_MESSAGE_RAW_H
#define UBLOX_MESSAGE_RAW_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "ublox/rawmeasreap.h"

namespace ublox
{
template <class ContainerAllocator>
struct raw_ {
  typedef raw_<ContainerAllocator> Type;

  raw_()
  : header()
  , RawMeasReap()
  {
  }

  raw_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , RawMeasReap()
  {
    RawMeasReap.assign( ::ublox::rawmeasreap_<ContainerAllocator> (_alloc));
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef boost::array< ::ublox::rawmeasreap_<ContainerAllocator> , 32>  _RawMeasReap_type;
  boost::array< ::ublox::rawmeasreap_<ContainerAllocator> , 32>  RawMeasReap;


  typedef boost::shared_ptr< ::ublox::raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::raw_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct raw
typedef  ::ublox::raw_<std::allocator<void> > raw;

typedef boost::shared_ptr< ::ublox::raw> rawPtr;
typedef boost::shared_ptr< ::ublox::raw const> rawConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox::raw_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox::raw_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox::raw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox::raw_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox::raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "adf036c089e10cedb0284b01bd41ad77";
  }

  static const char* value(const  ::ublox::raw_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xadf036c089e10cedULL;
  static const uint64_t static_value2 = 0xb0284b01bd41ad77ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox/raw";
  }

  static const char* value(const  ::ublox::raw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox::raw_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# RXM-RAW\n\
\n\
rawmeasreap[32] RawMeasReap\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ublox/rawmeasreap\n\
# RawMeasReap\n\
\n\
float64 cpmeas      # cycles - Carrier Phase measurement\n\
float64 prmeas    # m - Psuedorange measurement\n\
float64 domeas       # Hz - Doppler Measurement\n\
float64 svid       # SV Number\n\
float64 measqual    # Nav Measurement Quality Indicator  -- (>=4 PR+DO OK) (>=5 PR+DO+CP OK) (<6 likel loss carrier lock)\n\
float64 cnratio     # dbHz - Carrier to Noise Ratio\n\
float64 lli        # Loss of Lock Indicator (RINEX Definition)\n\
";
  }

  static const char* value(const  ::ublox::raw_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ublox::raw_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ublox::raw_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox::raw_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.RawMeasReap);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct raw_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox::raw_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "RawMeasReap[]" << std::endl;
    for (size_t i = 0; i < v.RawMeasReap.size(); ++i)
    {
      s << indent << "  RawMeasReap[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ublox::rawmeasreap_<ContainerAllocator> >::stream(s, indent + "    ", v.RawMeasReap[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_RAW_H


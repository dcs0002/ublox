/* Auto-generated by genmsg_cpp for file /home/cody/Development/DR_ws/ublox/msg/Ephem.msg */
#ifndef UBLOX_MESSAGE_EPHEM_H
#define UBLOX_MESSAGE_EPHEM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "ublox/svephdata.h"

namespace ublox
{
template <class ContainerAllocator>
struct Ephem_ {
  typedef Ephem_<ContainerAllocator> Type;

  Ephem_()
  : header()
  , ParsedEphemData()
  {
  }

  Ephem_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , ParsedEphemData(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::ublox::svephdata_<ContainerAllocator>  _ParsedEphemData_type;
   ::ublox::svephdata_<ContainerAllocator>  ParsedEphemData;


  typedef boost::shared_ptr< ::ublox::Ephem_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::Ephem_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Ephem
typedef  ::ublox::Ephem_<std::allocator<void> > Ephem;

typedef boost::shared_ptr< ::ublox::Ephem> EphemPtr;
typedef boost::shared_ptr< ::ublox::Ephem const> EphemConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox::Ephem_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox::Ephem_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox::Ephem_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox::Ephem_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox::Ephem_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d32a65187ce4c5054346cf4bf47b3233";
  }

  static const char* value(const  ::ublox::Ephem_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd32a65187ce4c505ULL;
  static const uint64_t static_value2 = 0x4346cf4bf47b3233ULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::Ephem_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox/Ephem";
  }

  static const char* value(const  ::ublox::Ephem_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox::Ephem_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
# Ephem Data\n\
\n\
svephdata ParsedEphemData\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: ublox/svephdata\n\
# ParsedEphemData\n\
\n\
float64 prn				#PRN number\n\
float64 tow				#time stamp of subframe 0 (s)\n\
float64 health		#health status, defined in ICD-GPS-200\n\
float64 iode1		#issue of ephemeris data 1\n\
float64 iode2		#issue of ephemeris data 2\n\
float64 week			#GPS week number\n\
float64 zweek		#z count week number\n\
float64 toe					#reference time for ephemeris (s)\n\
float64 majaxis				#semi major axis (m)\n\
float64 dN					#Mean motion difference (rad/s)\n\
float64 anrtime				#mean anomoly reference time (rad)\n\
float64 ecc					#eccentricity\n\
float64 omega				#arguement of perigee (rad)\n\
float64 cuc					#arugument of latitude - cos (rad)\n\
float64 cus					#argument of latitude - sine (rad)\n\
float64 crc					#orbit radius - cos (rad)\n\
float64 crs					#orbit radius - sine (rad)\n\
float64 cic					#inclination - cos (rad)\n\
float64 cis					#inclination - sine (rad)\n\
float64 ia					#inclination angle (rad)\n\
float64 dia					#rate of inclination angle (rad/s)\n\
float64 wo					#right ascension (rad)\n\
float64 dwo					#rate of right ascension (rad/s)\n\
float64 iodc			#issue of data clock\n\
float64 toc					#SV clock correction term (s)\n\
float64 tgd					#estimated group delay difference\n\
float64 af0					#clock aiging parameter 0\n\
float64 af1					#clock aiging parameter 1\n\
float64 af2					#clock aiging parameter 2\n\
float64 cmot				#corrected mean motion\n\
float64 ura			#user range accuracy variance (value 0-15)\n\
";
  }

  static const char* value(const  ::ublox::Ephem_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::ublox::Ephem_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::ublox::Ephem_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox::Ephem_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.ParsedEphemData);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Ephem_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::Ephem_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox::Ephem_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ParsedEphemData: ";
s << std::endl;
    Printer< ::ublox::svephdata_<ContainerAllocator> >::stream(s, indent + "  ", v.ParsedEphemData);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_EPHEM_H


/* Auto-generated by genmsg_cpp for file /home/cody/Development/DR_ws/ublox/msg/svephdata.msg */
#ifndef UBLOX_MESSAGE_SVEPHDATA_H
#define UBLOX_MESSAGE_SVEPHDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ublox
{
template <class ContainerAllocator>
struct svephdata_ {
  typedef svephdata_<ContainerAllocator> Type;

  svephdata_()
  : prn(0.0)
  , tow(0.0)
  , health(0.0)
  , iode1(0.0)
  , iode2(0.0)
  , week(0.0)
  , zweek(0.0)
  , toe(0.0)
  , majaxis(0.0)
  , dN(0.0)
  , anrtime(0.0)
  , ecc(0.0)
  , omega(0.0)
  , cuc(0.0)
  , cus(0.0)
  , crc(0.0)
  , crs(0.0)
  , cic(0.0)
  , cis(0.0)
  , ia(0.0)
  , dia(0.0)
  , wo(0.0)
  , dwo(0.0)
  , iodc(0.0)
  , toc(0.0)
  , tgd(0.0)
  , af0(0.0)
  , af1(0.0)
  , af2(0.0)
  , cmot(0.0)
  , ura(0.0)
  {
  }

  svephdata_(const ContainerAllocator& _alloc)
  : prn(0.0)
  , tow(0.0)
  , health(0.0)
  , iode1(0.0)
  , iode2(0.0)
  , week(0.0)
  , zweek(0.0)
  , toe(0.0)
  , majaxis(0.0)
  , dN(0.0)
  , anrtime(0.0)
  , ecc(0.0)
  , omega(0.0)
  , cuc(0.0)
  , cus(0.0)
  , crc(0.0)
  , crs(0.0)
  , cic(0.0)
  , cis(0.0)
  , ia(0.0)
  , dia(0.0)
  , wo(0.0)
  , dwo(0.0)
  , iodc(0.0)
  , toc(0.0)
  , tgd(0.0)
  , af0(0.0)
  , af1(0.0)
  , af2(0.0)
  , cmot(0.0)
  , ura(0.0)
  {
  }

  typedef double _prn_type;
  double prn;

  typedef double _tow_type;
  double tow;

  typedef double _health_type;
  double health;

  typedef double _iode1_type;
  double iode1;

  typedef double _iode2_type;
  double iode2;

  typedef double _week_type;
  double week;

  typedef double _zweek_type;
  double zweek;

  typedef double _toe_type;
  double toe;

  typedef double _majaxis_type;
  double majaxis;

  typedef double _dN_type;
  double dN;

  typedef double _anrtime_type;
  double anrtime;

  typedef double _ecc_type;
  double ecc;

  typedef double _omega_type;
  double omega;

  typedef double _cuc_type;
  double cuc;

  typedef double _cus_type;
  double cus;

  typedef double _crc_type;
  double crc;

  typedef double _crs_type;
  double crs;

  typedef double _cic_type;
  double cic;

  typedef double _cis_type;
  double cis;

  typedef double _ia_type;
  double ia;

  typedef double _dia_type;
  double dia;

  typedef double _wo_type;
  double wo;

  typedef double _dwo_type;
  double dwo;

  typedef double _iodc_type;
  double iodc;

  typedef double _toc_type;
  double toc;

  typedef double _tgd_type;
  double tgd;

  typedef double _af0_type;
  double af0;

  typedef double _af1_type;
  double af1;

  typedef double _af2_type;
  double af2;

  typedef double _cmot_type;
  double cmot;

  typedef double _ura_type;
  double ura;


  typedef boost::shared_ptr< ::ublox::svephdata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ublox::svephdata_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct svephdata
typedef  ::ublox::svephdata_<std::allocator<void> > svephdata;

typedef boost::shared_ptr< ::ublox::svephdata> svephdataPtr;
typedef boost::shared_ptr< ::ublox::svephdata const> svephdataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ublox::svephdata_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ublox::svephdata_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ublox

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ublox::svephdata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ublox::svephdata_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ublox::svephdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4b23ce20f091f69e99837e04d18ce9a";
  }

  static const char* value(const  ::ublox::svephdata_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb4b23ce20f091f69ULL;
  static const uint64_t static_value2 = 0xe99837e04d18ce9aULL;
};

template<class ContainerAllocator>
struct DataType< ::ublox::svephdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ublox/svephdata";
  }

  static const char* value(const  ::ublox::svephdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ublox::svephdata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ParsedEphemData\n\
\n\
float64 prn				#PRN number\n\
float64 tow				#time stamp of subframe 0 (s)\n\
float64 health		#health status, defined in ICD-GPS-200\n\
float64 iode1		#issue of ephemeris data 1\n\
float64 iode2		#issue of ephemeris data 2\n\
float64 week			#GPS week number\n\
float64 zweek		#z count week number\n\
float64 toe					#reference time for ephemeris (s)\n\
float64 majaxis				#semi major axis (m)\n\
float64 dN					#Mean motion difference (rad/s)\n\
float64 anrtime				#mean anomoly reference time (rad)\n\
float64 ecc					#eccentricity\n\
float64 omega				#arguement of perigee (rad)\n\
float64 cuc					#arugument of latitude - cos (rad)\n\
float64 cus					#argument of latitude - sine (rad)\n\
float64 crc					#orbit radius - cos (rad)\n\
float64 crs					#orbit radius - sine (rad)\n\
float64 cic					#inclination - cos (rad)\n\
float64 cis					#inclination - sine (rad)\n\
float64 ia					#inclination angle (rad)\n\
float64 dia					#rate of inclination angle (rad/s)\n\
float64 wo					#right ascension (rad)\n\
float64 dwo					#rate of right ascension (rad/s)\n\
float64 iodc			#issue of data clock\n\
float64 toc					#SV clock correction term (s)\n\
float64 tgd					#estimated group delay difference\n\
float64 af0					#clock aiging parameter 0\n\
float64 af1					#clock aiging parameter 1\n\
float64 af2					#clock aiging parameter 2\n\
float64 cmot				#corrected mean motion\n\
float64 ura			#user range accuracy variance (value 0-15)\n\
";
  }

  static const char* value(const  ::ublox::svephdata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ublox::svephdata_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ublox::svephdata_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.prn);
    stream.next(m.tow);
    stream.next(m.health);
    stream.next(m.iode1);
    stream.next(m.iode2);
    stream.next(m.week);
    stream.next(m.zweek);
    stream.next(m.toe);
    stream.next(m.majaxis);
    stream.next(m.dN);
    stream.next(m.anrtime);
    stream.next(m.ecc);
    stream.next(m.omega);
    stream.next(m.cuc);
    stream.next(m.cus);
    stream.next(m.crc);
    stream.next(m.crs);
    stream.next(m.cic);
    stream.next(m.cis);
    stream.next(m.ia);
    stream.next(m.dia);
    stream.next(m.wo);
    stream.next(m.dwo);
    stream.next(m.iodc);
    stream.next(m.toc);
    stream.next(m.tgd);
    stream.next(m.af0);
    stream.next(m.af1);
    stream.next(m.af2);
    stream.next(m.cmot);
    stream.next(m.ura);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct svephdata_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ublox::svephdata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ublox::svephdata_<ContainerAllocator> & v) 
  {
    s << indent << "prn: ";
    Printer<double>::stream(s, indent + "  ", v.prn);
    s << indent << "tow: ";
    Printer<double>::stream(s, indent + "  ", v.tow);
    s << indent << "health: ";
    Printer<double>::stream(s, indent + "  ", v.health);
    s << indent << "iode1: ";
    Printer<double>::stream(s, indent + "  ", v.iode1);
    s << indent << "iode2: ";
    Printer<double>::stream(s, indent + "  ", v.iode2);
    s << indent << "week: ";
    Printer<double>::stream(s, indent + "  ", v.week);
    s << indent << "zweek: ";
    Printer<double>::stream(s, indent + "  ", v.zweek);
    s << indent << "toe: ";
    Printer<double>::stream(s, indent + "  ", v.toe);
    s << indent << "majaxis: ";
    Printer<double>::stream(s, indent + "  ", v.majaxis);
    s << indent << "dN: ";
    Printer<double>::stream(s, indent + "  ", v.dN);
    s << indent << "anrtime: ";
    Printer<double>::stream(s, indent + "  ", v.anrtime);
    s << indent << "ecc: ";
    Printer<double>::stream(s, indent + "  ", v.ecc);
    s << indent << "omega: ";
    Printer<double>::stream(s, indent + "  ", v.omega);
    s << indent << "cuc: ";
    Printer<double>::stream(s, indent + "  ", v.cuc);
    s << indent << "cus: ";
    Printer<double>::stream(s, indent + "  ", v.cus);
    s << indent << "crc: ";
    Printer<double>::stream(s, indent + "  ", v.crc);
    s << indent << "crs: ";
    Printer<double>::stream(s, indent + "  ", v.crs);
    s << indent << "cic: ";
    Printer<double>::stream(s, indent + "  ", v.cic);
    s << indent << "cis: ";
    Printer<double>::stream(s, indent + "  ", v.cis);
    s << indent << "ia: ";
    Printer<double>::stream(s, indent + "  ", v.ia);
    s << indent << "dia: ";
    Printer<double>::stream(s, indent + "  ", v.dia);
    s << indent << "wo: ";
    Printer<double>::stream(s, indent + "  ", v.wo);
    s << indent << "dwo: ";
    Printer<double>::stream(s, indent + "  ", v.dwo);
    s << indent << "iodc: ";
    Printer<double>::stream(s, indent + "  ", v.iodc);
    s << indent << "toc: ";
    Printer<double>::stream(s, indent + "  ", v.toc);
    s << indent << "tgd: ";
    Printer<double>::stream(s, indent + "  ", v.tgd);
    s << indent << "af0: ";
    Printer<double>::stream(s, indent + "  ", v.af0);
    s << indent << "af1: ";
    Printer<double>::stream(s, indent + "  ", v.af1);
    s << indent << "af2: ";
    Printer<double>::stream(s, indent + "  ", v.af2);
    s << indent << "cmot: ";
    Printer<double>::stream(s, indent + "  ", v.cmot);
    s << indent << "ura: ";
    Printer<double>::stream(s, indent + "  ", v.ura);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UBLOX_MESSAGE_SVEPHDATA_H


"""autogenerated by genpy from ublox/svephdata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class svephdata(genpy.Message):
  _md5sum = "b4b23ce20f091f69e99837e04d18ce9a"
  _type = "ublox/svephdata"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ParsedEphemData

float64 prn				#PRN number
float64 tow				#time stamp of subframe 0 (s)
float64 health		#health status, defined in ICD-GPS-200
float64 iode1		#issue of ephemeris data 1
float64 iode2		#issue of ephemeris data 2
float64 week			#GPS week number
float64 zweek		#z count week number
float64 toe					#reference time for ephemeris (s)
float64 majaxis				#semi major axis (m)
float64 dN					#Mean motion difference (rad/s)
float64 anrtime				#mean anomoly reference time (rad)
float64 ecc					#eccentricity
float64 omega				#arguement of perigee (rad)
float64 cuc					#arugument of latitude - cos (rad)
float64 cus					#argument of latitude - sine (rad)
float64 crc					#orbit radius - cos (rad)
float64 crs					#orbit radius - sine (rad)
float64 cic					#inclination - cos (rad)
float64 cis					#inclination - sine (rad)
float64 ia					#inclination angle (rad)
float64 dia					#rate of inclination angle (rad/s)
float64 wo					#right ascension (rad)
float64 dwo					#rate of right ascension (rad/s)
float64 iodc			#issue of data clock
float64 toc					#SV clock correction term (s)
float64 tgd					#estimated group delay difference
float64 af0					#clock aiging parameter 0
float64 af1					#clock aiging parameter 1
float64 af2					#clock aiging parameter 2
float64 cmot				#corrected mean motion
float64 ura			#user range accuracy variance (value 0-15)
"""
  __slots__ = ['prn','tow','health','iode1','iode2','week','zweek','toe','majaxis','dN','anrtime','ecc','omega','cuc','cus','crc','crs','cic','cis','ia','dia','wo','dwo','iodc','toc','tgd','af0','af1','af2','cmot','ura']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       prn,tow,health,iode1,iode2,week,zweek,toe,majaxis,dN,anrtime,ecc,omega,cuc,cus,crc,crs,cic,cis,ia,dia,wo,dwo,iodc,toc,tgd,af0,af1,af2,cmot,ura

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(svephdata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.prn is None:
        self.prn = 0.
      if self.tow is None:
        self.tow = 0.
      if self.health is None:
        self.health = 0.
      if self.iode1 is None:
        self.iode1 = 0.
      if self.iode2 is None:
        self.iode2 = 0.
      if self.week is None:
        self.week = 0.
      if self.zweek is None:
        self.zweek = 0.
      if self.toe is None:
        self.toe = 0.
      if self.majaxis is None:
        self.majaxis = 0.
      if self.dN is None:
        self.dN = 0.
      if self.anrtime is None:
        self.anrtime = 0.
      if self.ecc is None:
        self.ecc = 0.
      if self.omega is None:
        self.omega = 0.
      if self.cuc is None:
        self.cuc = 0.
      if self.cus is None:
        self.cus = 0.
      if self.crc is None:
        self.crc = 0.
      if self.crs is None:
        self.crs = 0.
      if self.cic is None:
        self.cic = 0.
      if self.cis is None:
        self.cis = 0.
      if self.ia is None:
        self.ia = 0.
      if self.dia is None:
        self.dia = 0.
      if self.wo is None:
        self.wo = 0.
      if self.dwo is None:
        self.dwo = 0.
      if self.iodc is None:
        self.iodc = 0.
      if self.toc is None:
        self.toc = 0.
      if self.tgd is None:
        self.tgd = 0.
      if self.af0 is None:
        self.af0 = 0.
      if self.af1 is None:
        self.af1 = 0.
      if self.af2 is None:
        self.af2 = 0.
      if self.cmot is None:
        self.cmot = 0.
      if self.ura is None:
        self.ura = 0.
    else:
      self.prn = 0.
      self.tow = 0.
      self.health = 0.
      self.iode1 = 0.
      self.iode2 = 0.
      self.week = 0.
      self.zweek = 0.
      self.toe = 0.
      self.majaxis = 0.
      self.dN = 0.
      self.anrtime = 0.
      self.ecc = 0.
      self.omega = 0.
      self.cuc = 0.
      self.cus = 0.
      self.crc = 0.
      self.crs = 0.
      self.cic = 0.
      self.cis = 0.
      self.ia = 0.
      self.dia = 0.
      self.wo = 0.
      self.dwo = 0.
      self.iodc = 0.
      self.toc = 0.
      self.tgd = 0.
      self.af0 = 0.
      self.af1 = 0.
      self.af2 = 0.
      self.cmot = 0.
      self.ura = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_31d.pack(_x.prn, _x.tow, _x.health, _x.iode1, _x.iode2, _x.week, _x.zweek, _x.toe, _x.majaxis, _x.dN, _x.anrtime, _x.ecc, _x.omega, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.ia, _x.dia, _x.wo, _x.dwo, _x.iodc, _x.toc, _x.tgd, _x.af0, _x.af1, _x.af2, _x.cmot, _x.ura))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 248
      (_x.prn, _x.tow, _x.health, _x.iode1, _x.iode2, _x.week, _x.zweek, _x.toe, _x.majaxis, _x.dN, _x.anrtime, _x.ecc, _x.omega, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.ia, _x.dia, _x.wo, _x.dwo, _x.iodc, _x.toc, _x.tgd, _x.af0, _x.af1, _x.af2, _x.cmot, _x.ura,) = _struct_31d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_31d.pack(_x.prn, _x.tow, _x.health, _x.iode1, _x.iode2, _x.week, _x.zweek, _x.toe, _x.majaxis, _x.dN, _x.anrtime, _x.ecc, _x.omega, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.ia, _x.dia, _x.wo, _x.dwo, _x.iodc, _x.toc, _x.tgd, _x.af0, _x.af1, _x.af2, _x.cmot, _x.ura))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 248
      (_x.prn, _x.tow, _x.health, _x.iode1, _x.iode2, _x.week, _x.zweek, _x.toe, _x.majaxis, _x.dN, _x.anrtime, _x.ecc, _x.omega, _x.cuc, _x.cus, _x.crc, _x.crs, _x.cic, _x.cis, _x.ia, _x.dia, _x.wo, _x.dwo, _x.iodc, _x.toc, _x.tgd, _x.af0, _x.af1, _x.af2, _x.cmot, _x.ura,) = _struct_31d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_31d = struct.Struct("<31d")

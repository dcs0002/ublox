"""autogenerated by genpy from ublox/rawmeasreap.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rawmeasreap(genpy.Message):
  _md5sum = "3e0d85a162ba346cb0d65c80e9547c99"
  _type = "ublox/rawmeasreap"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# RawMeasReap

float64 cpmeas      # cycles - Carrier Phase measurement
float64 prmeas    # m - Psuedorange measurement
float64 domeas       # Hz - Doppler Measurement
float64 svid       # SV Number
float64 measqual    # Nav Measurement Quality Indicator  -- (>=4 PR+DO OK) (>=5 PR+DO+CP OK) (<6 likel loss carrier lock)
float64 cnratio     # dbHz - Carrier to Noise Ratio
float64 lli        # Loss of Lock Indicator (RINEX Definition)
"""
  __slots__ = ['cpmeas','prmeas','domeas','svid','measqual','cnratio','lli']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cpmeas,prmeas,domeas,svid,measqual,cnratio,lli

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rawmeasreap, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cpmeas is None:
        self.cpmeas = 0.
      if self.prmeas is None:
        self.prmeas = 0.
      if self.domeas is None:
        self.domeas = 0.
      if self.svid is None:
        self.svid = 0.
      if self.measqual is None:
        self.measqual = 0.
      if self.cnratio is None:
        self.cnratio = 0.
      if self.lli is None:
        self.lli = 0.
    else:
      self.cpmeas = 0.
      self.prmeas = 0.
      self.domeas = 0.
      self.svid = 0.
      self.measqual = 0.
      self.cnratio = 0.
      self.lli = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.cpmeas, _x.prmeas, _x.domeas, _x.svid, _x.measqual, _x.cnratio, _x.lli))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.cpmeas, _x.prmeas, _x.domeas, _x.svid, _x.measqual, _x.cnratio, _x.lli,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.cpmeas, _x.prmeas, _x.domeas, _x.svid, _x.measqual, _x.cnratio, _x.lli))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 56
      (_x.cpmeas, _x.prmeas, _x.domeas, _x.svid, _x.measqual, _x.cnratio, _x.lli,) = _struct_7d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d = struct.Struct("<7d")
